%package "crg.turtle";
%import "crg.turtle.ast.*";
%import "java.util.ArrayList";
%import "java.util.Collections";
%import "java.util.List";
%import "java.util.Map";
%import "java.util.HashMap";
%class "Parser";

%embed {:
  private String docBase = null;
  private Map<String,String> prefixMap = new HashMap<String,String>();
  private NodeBuilder builder;
  private Types types;
  private static final Symbol EMPTY = new Symbol(Collections.emptyList());

  public Parser(NodeBuilder builder) {
    this();
    this.builder = builder;
    RDF.init(builder, prefixMap);
    types = new Types(builder);
  }

  public Map<String,String> getPrefixMap() { return prefixMap; }

  public String getBase() { return docBase; }

  public void setBase(String b) {
    if (b.indexOf(':') < 0) docBase = docBase + b;
    else docBase = b;
    prefixMap.put("", docBase);
  }

  Symbol getTriples(List<Triple> triples, Object s, List<PredicateObjects> pol) {
    for (PredicateObjects po: pol) {
      Object p = po.getPredicate();
      for (Object o: po.getObjects()) {
        if (o instanceof AstNode) ((AstNode)o).addAsObject(triples, s, p);
        else triples.add(new Triple(s, p, o));
      }
    }
    return new Symbol(triples);
  }
:};

%terminals BASE, PREFIX, SPARQL_BASE, SPARQL_PREFIX, DOT, IRI_REF, PNAME_NS, PNAME_LN;
%terminals STRING, LANGTAG, INTEGER_LITERAL, DOUBLE_LITERAL, DECIMAL_LITERAL, BOOL;
%terminals BLANK_NODE, SEMICOLON, COMMA;
%terminals START_BLANKNODE_LIST, END_BLANKNODE_LIST, START_COLLECTION, END_COLLECTION;
%terminals TYPED_LITERAL_SEPARATOR, RDF_TYPE;

%left START_BLANKNODE_LIST;
%left END_BLANKNODE_LIST;
%left START_COLLECTION;
%left END_COLLECTION;
%left COMMA;

%typeof STRING = "String";
%typeof DOUBLE_LITERAL = "String";
%typeof DECIMAL_LITERAL = "String";
%typeof INTEGER_LITERAL = "String";
%typeof IRI_REF = "String";
%typeof PNAME_LN = "String";
%typeof PNAME_NS = "String";
%typeof LANGTAG = "String";
%typeof BOOL = "Boolean";
%typeof BLANK_NODE = "String";
%typeof predicateObject = "PredicateObjects";
%typeof predicateObjectList = "List<PredicateObjects>";
%typeof predicateObjectSemiList = "List<PredicateObjects>";
%typeof objectList = "List<Object>";
%typeof PrefixedName = "String[]";

%goal document;

document = statement?;

statement = directive.d {: return d; :}
          | triples.t DOT {: return t; :};

directive = prefixID
          | base
          | sparqlPrefix
          | sparqlBase;

prefixID = PREFIX PNAME_NS.ns IRI_REF.ref DOT {: prefixMap.put(ns, ref);
  return EMPTY; :};

base = BASE IRI_REF.b DOT {: setBase(b); return EMPTY; :};

sparqlPrefix = SPARQL_PREFIX PNAME_NS.ns IRI_REF.ref {: prefixMap.put(ns, ref); return EMPTY; :};

sparqlBase = SPARQL_BASE IRI_REF.b DOT {: setBase(b); return EMPTY; :};

triples = subject.s predicateObjectList.pol {:
    List<Triple> t = new ArrayList<Triple>();
    Object subj;
    Object sa = s.value;
    if (sa instanceof AstNode) {
      ((AstNode)sa).getTriples(t);
      subj = ((AstNode)sa).getNode();
    } else {
      subj = sa;
    }
    return getTriples(t, subj, pol);
  :}
  | blankNodePropertyList.bl predicateObjectList.pol? {:
    List<Triple> t = new ArrayList<Triple>();
    ((PropertyListNode)bl.value).getTriples(t);
    if (pol != null && !pol.isEmpty()) return getTriples(t, ((PropertyListNode)bl.value).getNode(), pol);
    return new Symbol(t);
  :};

predicateObjectList = predicateObjectSemiList.posl SEMICOLON* {: return _symbol_posl; :};

predicateObjectSemiList = predicateObject.po {:
                      ArrayList<PredicateObjects> lst = new ArrayList<PredicateObjects>();
                      lst.add(po);
                      return new Symbol(lst);
                    :}
                    | predicateObjectSemiList.posl SEMICOLON+ predicateObject.po {:
                      posl.add(po);
                      return _symbol_posl;
                    :};

predicateObject = verb.v objectList.ol {: return new PredicateObjects(v.value, ol); :};

objectList = object.o {:
             ArrayList<Object> lst = new ArrayList<Object>();
             lst.add(o.value);
             return new Symbol(lst);
           :}
           | objectList.ol COMMA object.o {:
             ol.add(o.value);
             return _symbol_ol;
           :};

verb = IRIref
     | RDF_TYPE {: 
       return new Symbol(RDF.getType());
     :};

subject = IRIref
        | blank;

object = IRIref
       | blank
       | blankNodePropertyList
       | literal;

literal = RDFLiteral
        | DOUBLE_LITERAL.l {:
          return new Symbol(builder.newLiteral(l, types.getXsdDouble(prefixMap), null));
        :}
        | DECIMAL_LITERAL.l {:
          return new Symbol(builder.newLiteral(l, types.getXsdDecimal(prefixMap), null));
        :}
        | INTEGER_LITERAL.l {:
            return new Symbol(builder.newLiteral(l, types.getXsdInteger(prefixMap), null));
        :}
        | BOOL.b {:
          return new Symbol(types.getXsdBooleanValue(prefixMap, b));
        :};

blank = BLANK_NODE.b {: return b == null || b.length() == 0 ? new Symbol(builder.newBlank()) : new Symbol(builder.newBlank(b)); :}
      | collection.c {: return c; :};

blankNodePropertyList = START_BLANKNODE_LIST predicateObjectList.l END_BLANKNODE_LIST {: return new PropertyListNode(builder.newBlank(), l); :};

collection = START_COLLECTION object.ol* END_COLLECTION {: return new CollectionNode(builder, (List<Symbol>)ol.value); :};

RDFLiteral = STRING.s LangOrType.lt? {:
      if (lt.value == null) return new Symbol(builder.newLiteral(s, null, null));
      return new Symbol(builder.newLiteral(s, ((Object[])lt.value)[0], (String)((Object[])lt.value)[1]));
  :};

LangOrType = LANGTAG.l {: return new Symbol(new Object[] { null, l }); :}
         | TYPED_LITERAL_SEPARATOR IRIref.r {: return new Symbol(new Object[] { r.value, null });:};

IRIref = IRI_REF.i        {: return new Symbol(builder.newIri(i, docBase)); :}
       | PrefixedName.n   {: return new Symbol(builder.newIri(prefixMap, docBase, n[0], n[1])); :};

PrefixedName = PNAME_LN.n {: return new Symbol(n.split(":")); :}
             | PNAME_NS.n {: return new Symbol(new String[] {n, ""}); :};


