%package "crg.turtle";
%import "crg.turtle.nodes.NodeBuilder";
%import "crg.turtle.nodes.*";
%import "java.util.ArrayList";
%import "java.util.Collections";
%import "java.util.List";
%import "java.util.Map";
%import "java.util.HashMap";
%import "clojure.lang.RT";
%import "clojure.lang.Keyword";
%import "clojure.lang.PersistentArrayMap";
%import "clojure.lang.IPersistentMap";
%import "clojure.lang.PersistentVector";
%import "clojure.lang.IPersistentCollection";
%class "Parser";

%embed {:
  private String docBase = null;
  private IPersistentMap prefixMap;
  private NodeBuilder builder;
  private Nodes clj = new NodeImpl();
  private static final Symbol EMPTY = new Symbol(Collections.emptyList());
  private static final Symbol RDF_TYPE = new Symbol(RT.keyword("rdf", "type"));
  private static final Keyword XSD_INTEGER = RT.keyword("xsd", "integer");
  private static final Keyword XSD_DOUBLE = RT.keyword("xsd", "double");
  private static final Keyword XSD_DECIMAL = RT.keyword("xsd", "decimal");
  private static final Keyword XSD_BOOLEAN = RT.keyword("xsd", "boolean");

  public Parser(NodeBuilder builder, IPersistentMap prefixMap) {
    this();
    this.builder = builder;
    this.prefixMap = prefixMap;
  }

  public IPersistentMap getPrefixMap() { return prefixMap; }

  public String getBase() { return docBase; }

  public void setBase(String b) {
    if (b.indexOf(':') < 0) docBase = docBase + b;
    else docBase = b;
    prefixMap = prefixMap.assoc("", docBase);
  }

:};

%terminals BASE, PREFIX, SPARQL_BASE, SPARQL_PREFIX, DOT, IRIREF, PNAME_NS, PNAME_LN;
%terminals STRING, LANGTAG, INTEGER_LITERAL, DOUBLE_LITERAL, DECIMAL_LITERAL, BOOL;
%terminals BLANK_NODE, SEMICOLON, COMMA;
%terminals START_BLANKNODE_LIST, END_BLANKNODE_LIST, START_COLLECTION, END_COLLECTION;
%terminals TYPED_LITERAL_SEPARATOR, RDF_TYPE;

%left START_BLANKNODE_LIST;
%left END_BLANKNODE_LIST;
%left START_COLLECTION;
%left END_COLLECTION;
%left COMMA;

%typeof STRING = "String";
%typeof DOUBLE_LITERAL = "String";
%typeof DECIMAL_LITERAL = "String";
%typeof INTEGER_LITERAL = "String";
%typeof IRIREF = "String";
%typeof PNAME_LN = "String";
%typeof PNAME_NS = "String";
%typeof LANGTAG = "String";
%typeof BOOL = "Boolean";
%typeof BLANK_NODE = "String";
%typeof predicateObject = "PredicateObjects";
%typeof predicateObjectList = "List<PredicateObjects>";
%typeof predicateObjectSemiList = "IPersistentCollection";
%typeof objectList = "IPersistentCollection";
%typeof PrefixedName = "String[]";

%goal document;

document = statement?;

statement = directive.d {: return d; :}
          | triples.t DOT {: return t; :};

directive = prefixID
          | base
          | sparqlPrefix
          | sparqlBase;

prefixID = PREFIX PNAME_NS.ns IRIREF.ref DOT {: prefixMap = prefixMap.assoc(ns, ref);
  return EMPTY; :};

base = BASE IRIREF.b DOT {: setBase(b); return EMPTY; :};

sparqlPrefix = SPARQL_PREFIX PNAME_NS.ns IRIREF.ref {: prefixMap = prefixMap.assoc(ns, ref); return EMPTY; :};

sparqlBase = SPARQL_BASE IRIREF.b {: setBase(b); return EMPTY; :};

triples = subject.s predicateObjectList.pol {:
    return new Symbol(clj.subject_triples(builder, s.value, pol));
  :}
  | blankNodePropertyList.bl predicateObjectList.pol? {:
    return new Symbol(clj.blank_subject_triples(builder, bl.value, pol));
  :};

predicateObjectList = predicateObjectSemiList.posl SEMICOLON* {: return _symbol_posl; :};

predicateObjectSemiList = predicateObject.po {:
                      return new Symbol(RT.vector(po));
                    :}
                    | predicateObjectSemiList.posl SEMICOLON+ predicateObject.po {:
                      return new Symbol(RT.conj(posl, po));
                    :};

predicateObject = verb.v objectList.ol {: return new Symbol(clj.new_predicate_objects(v.value, ol)); :};

objectList = object.o {:
             return new Symbol(RT.vector(o.value));
           :}
           | objectList.ol COMMA object.o {:
             return new Symbol(RT.conj(ol, o.value));
           :};

verb = iri
     | RDF_TYPE {: 
       return RDF_TYPE;
     :};

subject = iri
        | blank;

object = iri
       | blank
       | blankNodePropertyList
       | literal;

literal = RDFLiteral
        | DOUBLE_LITERAL.l {:
          return new Symbol(builder.new_literal(l, XSD_DOUBLE, null));
        :}
        | DECIMAL_LITERAL.l {:
          return new Symbol(builder.new_literal(l, XSD_DECIMAL, null));
        :}
        | INTEGER_LITERAL.l {:
            return new Symbol(builder.new_literal(l, XSD_INTEGER, null));
        :}
        | BOOL.b {:
          // TODO hard code this to true/false
          return new Symbol(builder.new_literal(b, XSD_BOOLEAN, null));
        :};

blank = BLANK_NODE.b {:
      return b == null || b.length() == 0
        ? new Symbol(builder.new_blank()) : new Symbol(builder.new_blank(b));
  :}
  | collection.c {: return c; :};

blankNodePropertyList = START_BLANKNODE_LIST predicateObjectList.l END_BLANKNODE_LIST {:
      return new Symbol(clj.new_property_list_node(builder.new_blank(), l));
  :};

collection = START_COLLECTION object.ol* END_COLLECTION {:
      return new Symbol(clj.new_collection_node(builder, (List<Symbol>)ol.value));
  :};

RDFLiteral = STRING.s LangOrType.lt? {:
      if (lt.value == null) return new Symbol(builder.new_literal(s, null, null));
      return new Symbol(builder.new_literal(s, ((Object[])lt.value)[0], (String)((Object[])lt.value)[1]));
  :};

LangOrType = LANGTAG.l {: return new Symbol(new Object[] { null, l }); :}
         | TYPED_LITERAL_SEPARATOR iri.r {: return new Symbol(new Object[] { r.value, null });:};

iri = IRIREF.i         {:
      PersistentVector tuple = (PersistentVector)builder.new_iri(prefixMap, i, docBase);
      prefixMap = (IPersistentMap)RT.second(tuple);
      return new Symbol(RT.first(tuple)); :}
    | PrefixedName.n   {:
      PersistentVector tuple = (PersistentVector)builder.new_iri(prefixMap, docBase, n[0], n[1]);
      prefixMap = (IPersistentMap)RT.second(tuple);
      return new Symbol(RT.first(tuple)); :};

PrefixedName = PNAME_LN.n {: return new Symbol(n.split(":")); :}
             | PNAME_NS.n {: return new Symbol(new String[] {n, ""}); :};


